### YamlMime:ManagedReference
items:
- uid: MicroService.Service.Models.ZipCodeShape
  commentId: T:MicroService.Service.Models.ZipCodeShape
  id: ZipCodeShape
  parent: MicroService.Service.Models
  children:
  - MicroService.Service.Models.ZipCodeShape.Area
  - MicroService.Service.Models.ZipCodeShape.BldgZip
  - MicroService.Service.Models.ZipCodeShape.CityFibs
  - MicroService.Service.Models.ZipCodeShape.County
  - MicroService.Service.Models.ZipCodeShape.Population
  - MicroService.Service.Models.ZipCodeShape.PostOfficeName
  - MicroService.Service.Models.ZipCodeShape.State
  - MicroService.Service.Models.ZipCodeShape.StateFibs
  - MicroService.Service.Models.ZipCodeShape.Url
  - MicroService.Service.Models.ZipCodeShape.ZipCode
  langs:
  - csharp
  - vb
  name: ZipCodeShape
  nameWithType: ZipCodeShape
  fullName: MicroService.Service.Models.ZipCodeShape
  type: Class
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ZipCodeShape
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 6
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [ShapeProperties(ShapeProperties.ZipCodes)]

      public class ZipCodeShape : ShapeBase
    content.vb: >-
      <ShapeProperties(ShapeProperties.ZipCodes)>

      Public Class ZipCodeShape Inherits ShapeBase
  inheritance:
  - System.Object
  - MicroService.Service.Models.Base.ShapeBase
  inheritedMembers:
  - MicroService.Service.Models.Base.ShapeBase.ShapeArea
  - MicroService.Service.Models.Base.ShapeBase.ShapeLength
  - MicroService.Service.Models.Base.ShapeBase.BoundingBox
  - MicroService.Service.Models.Base.ShapeBase.Geometry
  - MicroService.Service.Models.Base.ShapeBase.Feature
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - MicroService.Service.Models.ZipCodeShape.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.ShapePropertiesAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.ShapePropertiesAttribute.#ctor(MicroService.Service.Models.Enum.ShapeProperties)
    arguments:
    - type: MicroService.Service.Models.Enum.ShapeProperties
      value: 15
- uid: MicroService.Service.Models.ZipCodeShape.ZipCode
  commentId: P:MicroService.Service.Models.ZipCodeShape.ZipCode
  id: ZipCode
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: ZipCode
  nameWithType: ZipCodeShape.ZipCode
  fullName: MicroService.Service.Models.ZipCodeShape.ZipCode
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ZipCode
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 9
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("ZIPCODE")]

      public string ZipCode { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("ZIPCODE")>

      Public Property ZipCode As String
  overload: MicroService.Service.Models.ZipCodeShape.ZipCode*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ZIPCODE
- uid: MicroService.Service.Models.ZipCodeShape.BldgZip
  commentId: P:MicroService.Service.Models.ZipCodeShape.BldgZip
  id: BldgZip
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: BldgZip
  nameWithType: ZipCodeShape.BldgZip
  fullName: MicroService.Service.Models.ZipCodeShape.BldgZip
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: BldgZip
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 12
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("BLDGZIP")]

      public string BldgZip { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("BLDGZIP")>

      Public Property BldgZip As String
  overload: MicroService.Service.Models.ZipCodeShape.BldgZip*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: BLDGZIP
- uid: MicroService.Service.Models.ZipCodeShape.PostOfficeName
  commentId: P:MicroService.Service.Models.ZipCodeShape.PostOfficeName
  id: PostOfficeName
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: PostOfficeName
  nameWithType: ZipCodeShape.PostOfficeName
  fullName: MicroService.Service.Models.ZipCodeShape.PostOfficeName
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: PostOfficeName
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 15
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("PO_NAME")]

      public string PostOfficeName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("PO_NAME")>

      Public Property PostOfficeName As String
  overload: MicroService.Service.Models.ZipCodeShape.PostOfficeName*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: PO_NAME
- uid: MicroService.Service.Models.ZipCodeShape.Population
  commentId: P:MicroService.Service.Models.ZipCodeShape.Population
  id: Population
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: Population
  nameWithType: ZipCodeShape.Population
  fullName: MicroService.Service.Models.ZipCodeShape.Population
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Population
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 18
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("POPULATION")]

      public int Population { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <FeatureName("POPULATION")>

      Public Property Population As Integer
  overload: MicroService.Service.Models.ZipCodeShape.Population*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: POPULATION
- uid: MicroService.Service.Models.ZipCodeShape.Area
  commentId: P:MicroService.Service.Models.ZipCodeShape.Area
  id: Area
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: Area
  nameWithType: ZipCodeShape.Area
  fullName: MicroService.Service.Models.ZipCodeShape.Area
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Area
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 21
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("AREA")]

      public double Area { get; set; }
    parameters: []
    return:
      type: System.Double
    content.vb: >-
      <FeatureName("AREA")>

      Public Property Area As Double
  overload: MicroService.Service.Models.ZipCodeShape.Area*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: AREA
- uid: MicroService.Service.Models.ZipCodeShape.State
  commentId: P:MicroService.Service.Models.ZipCodeShape.State
  id: State
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: State
  nameWithType: ZipCodeShape.State
  fullName: MicroService.Service.Models.ZipCodeShape.State
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: State
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 24
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("STATE")]

      public string State { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("STATE")>

      Public Property State As String
  overload: MicroService.Service.Models.ZipCodeShape.State*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: STATE
- uid: MicroService.Service.Models.ZipCodeShape.County
  commentId: P:MicroService.Service.Models.ZipCodeShape.County
  id: County
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: County
  nameWithType: ZipCodeShape.County
  fullName: MicroService.Service.Models.ZipCodeShape.County
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: County
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 27
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("COUNTY")]

      public string County { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("COUNTY")>

      Public Property County As String
  overload: MicroService.Service.Models.ZipCodeShape.County*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: COUNTY
- uid: MicroService.Service.Models.ZipCodeShape.StateFibs
  commentId: P:MicroService.Service.Models.ZipCodeShape.StateFibs
  id: StateFibs
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: StateFibs
  nameWithType: ZipCodeShape.StateFibs
  fullName: MicroService.Service.Models.ZipCodeShape.StateFibs
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: StateFibs
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 30
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("ST_FIPS")]

      public string StateFibs { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("ST_FIPS")>

      Public Property StateFibs As String
  overload: MicroService.Service.Models.ZipCodeShape.StateFibs*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ST_FIPS
- uid: MicroService.Service.Models.ZipCodeShape.CityFibs
  commentId: P:MicroService.Service.Models.ZipCodeShape.CityFibs
  id: CityFibs
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: CityFibs
  nameWithType: ZipCodeShape.CityFibs
  fullName: MicroService.Service.Models.ZipCodeShape.CityFibs
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: CityFibs
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 33
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("CTY_FIPS")]

      public string CityFibs { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("CTY_FIPS")>

      Public Property CityFibs As String
  overload: MicroService.Service.Models.ZipCodeShape.CityFibs*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CTY_FIPS
- uid: MicroService.Service.Models.ZipCodeShape.Url
  commentId: P:MicroService.Service.Models.ZipCodeShape.Url
  id: Url
  parent: MicroService.Service.Models.ZipCodeShape
  langs:
  - csharp
  - vb
  name: Url
  nameWithType: ZipCodeShape.Url
  fullName: MicroService.Service.Models.ZipCodeShape.Url
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ZipCodeShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Url
    path: ../src/MicroService.Service/Models/ZipCodeShape.cs
    startLine: 36
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("URL")]

      public string Url { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("URL")>

      Public Property Url As String
  overload: MicroService.Service.Models.ZipCodeShape.Url*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: URL
references:
- uid: MicroService.Service.Models
  commentId: N:MicroService.Service.Models
  name: MicroService.Service.Models
  nameWithType: MicroService.Service.Models
  fullName: MicroService.Service.Models
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MicroService.Service.Models.Base.ShapeBase
  commentId: T:MicroService.Service.Models.Base.ShapeBase
  parent: MicroService.Service.Models.Base
  name: ShapeBase
  nameWithType: ShapeBase
  fullName: MicroService.Service.Models.Base.ShapeBase
- uid: MicroService.Service.Models.Base.ShapeBase.ShapeArea
  commentId: P:MicroService.Service.Models.Base.ShapeBase.ShapeArea
  parent: MicroService.Service.Models.Base.ShapeBase
  name: ShapeArea
  nameWithType: ShapeBase.ShapeArea
  fullName: MicroService.Service.Models.Base.ShapeBase.ShapeArea
- uid: MicroService.Service.Models.Base.ShapeBase.ShapeLength
  commentId: P:MicroService.Service.Models.Base.ShapeBase.ShapeLength
  parent: MicroService.Service.Models.Base.ShapeBase
  name: ShapeLength
  nameWithType: ShapeBase.ShapeLength
  fullName: MicroService.Service.Models.Base.ShapeBase.ShapeLength
- uid: MicroService.Service.Models.Base.ShapeBase.BoundingBox
  commentId: P:MicroService.Service.Models.Base.ShapeBase.BoundingBox
  parent: MicroService.Service.Models.Base.ShapeBase
  name: BoundingBox
  nameWithType: ShapeBase.BoundingBox
  fullName: MicroService.Service.Models.Base.ShapeBase.BoundingBox
- uid: MicroService.Service.Models.Base.ShapeBase.Geometry
  commentId: P:MicroService.Service.Models.Base.ShapeBase.Geometry
  parent: MicroService.Service.Models.Base.ShapeBase
  name: Geometry
  nameWithType: ShapeBase.Geometry
  fullName: MicroService.Service.Models.Base.ShapeBase.Geometry
- uid: MicroService.Service.Models.Base.ShapeBase.Feature
  commentId: P:MicroService.Service.Models.Base.ShapeBase.Feature
  parent: MicroService.Service.Models.Base.ShapeBase
  name: Feature
  nameWithType: ShapeBase.Feature
  fullName: MicroService.Service.Models.Base.ShapeBase.Feature
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: MicroService.Service.Models.ZipCodeShape.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  parent: MicroService.Service.Helpers.ReflectionExtensions
  definition: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<ZipCodeShape>(ZipCodeShape)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<ZipCodeShape>(ZipCodeShape)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<MicroService.Service.Models.ZipCodeShape>(MicroService.Service.Models.ZipCodeShape)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of ZipCodeShape)(ZipCodeShape)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of MicroService.Service.Models.ZipCodeShape)(MicroService.Service.Models.ZipCodeShape)
  name.vb: ArePropertiesNotNull(Of ZipCodeShape)(ZipCodeShape)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Service.Models.ZipCodeShape)
    name: ArePropertiesNotNull
  - name: <
  - uid: MicroService.Service.Models.ZipCodeShape
    name: ZipCodeShape
  - name: '>'
  - name: (
  - uid: MicroService.Service.Models.ZipCodeShape
    name: ZipCodeShape
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Service.Models.ZipCodeShape)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Service.Models.ZipCodeShape
    name: ZipCodeShape
  - name: )
  - name: (
  - uid: MicroService.Service.Models.ZipCodeShape
    name: ZipCodeShape
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Service.Models.Base
  commentId: N:MicroService.Service.Models.Base
  name: MicroService.Service.Models.Base
  nameWithType: MicroService.Service.Models.Base
  fullName: MicroService.Service.Models.Base
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  - name: .
  - uid: MicroService.Service.Models.Base
    name: Base
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  - name: .
  - uid: MicroService.Service.Models.Base
    name: Base
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<T>(T)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<T>(T)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<T>(T)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  name.vb: ArePropertiesNotNull(Of T)(T)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: MicroService.Service.Helpers.ReflectionExtensions
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions
  parent: MicroService.Service.Helpers
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: MicroService.Service.Helpers.ReflectionExtensions
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: MicroService.Service.Models.ZipCodeShape.ZipCode*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.ZipCode
  name: ZipCode
  nameWithType: ZipCodeShape.ZipCode
  fullName: MicroService.Service.Models.ZipCodeShape.ZipCode
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MicroService.Service.Models.ZipCodeShape.BldgZip*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.BldgZip
  name: BldgZip
  nameWithType: ZipCodeShape.BldgZip
  fullName: MicroService.Service.Models.ZipCodeShape.BldgZip
- uid: MicroService.Service.Models.ZipCodeShape.PostOfficeName*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.PostOfficeName
  name: PostOfficeName
  nameWithType: ZipCodeShape.PostOfficeName
  fullName: MicroService.Service.Models.ZipCodeShape.PostOfficeName
- uid: MicroService.Service.Models.ZipCodeShape.Population*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.Population
  name: Population
  nameWithType: ZipCodeShape.Population
  fullName: MicroService.Service.Models.ZipCodeShape.Population
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MicroService.Service.Models.ZipCodeShape.Area*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.Area
  name: Area
  nameWithType: ZipCodeShape.Area
  fullName: MicroService.Service.Models.ZipCodeShape.Area
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: MicroService.Service.Models.ZipCodeShape.State*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.State
  name: State
  nameWithType: ZipCodeShape.State
  fullName: MicroService.Service.Models.ZipCodeShape.State
- uid: MicroService.Service.Models.ZipCodeShape.County*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.County
  name: County
  nameWithType: ZipCodeShape.County
  fullName: MicroService.Service.Models.ZipCodeShape.County
- uid: MicroService.Service.Models.ZipCodeShape.StateFibs*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.StateFibs
  name: StateFibs
  nameWithType: ZipCodeShape.StateFibs
  fullName: MicroService.Service.Models.ZipCodeShape.StateFibs
- uid: MicroService.Service.Models.ZipCodeShape.CityFibs*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.CityFibs
  name: CityFibs
  nameWithType: ZipCodeShape.CityFibs
  fullName: MicroService.Service.Models.ZipCodeShape.CityFibs
- uid: MicroService.Service.Models.ZipCodeShape.Url*
  commentId: Overload:MicroService.Service.Models.ZipCodeShape.Url
  name: Url
  nameWithType: ZipCodeShape.Url
  fullName: MicroService.Service.Models.ZipCodeShape.Url
