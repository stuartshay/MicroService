### YamlMime:ManagedReference
items:
- uid: MicroService.Service.Models.ParkShape
  commentId: T:MicroService.Service.Models.ParkShape
  id: ParkShape
  parent: MicroService.Service.Models
  children:
  - MicroService.Service.Models.ParkShape.FeatureCode
  - MicroService.Service.Models.ParkShape.LandUse
  - MicroService.Service.Models.ParkShape.ParkName
  - MicroService.Service.Models.ParkShape.ParkNumber
  - MicroService.Service.Models.ParkShape.SourceId
  - MicroService.Service.Models.ParkShape.Status
  - MicroService.Service.Models.ParkShape.SubCode
  - MicroService.Service.Models.ParkShape.System
  langs:
  - csharp
  - vb
  name: ParkShape
  nameWithType: ParkShape
  fullName: MicroService.Service.Models.ParkShape
  type: Class
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ParkShape
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 6
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [ShapeProperties(ShapeProperties.Parks)]

      public class ParkShape : ShapeBase
    content.vb: >-
      <ShapeProperties(ShapeProperties.Parks)>

      Public Class ParkShape Inherits ShapeBase
  inheritance:
  - System.Object
  - MicroService.Service.Models.Base.ShapeBase
  inheritedMembers:
  - MicroService.Service.Models.Base.ShapeBase.ShapeArea
  - MicroService.Service.Models.Base.ShapeBase.ShapeLength
  - MicroService.Service.Models.Base.ShapeBase.BoundingBox
  - MicroService.Service.Models.Base.ShapeBase.Geometry
  - MicroService.Service.Models.Base.ShapeBase.Feature
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - MicroService.Service.Models.ParkShape.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.ShapePropertiesAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.ShapePropertiesAttribute.#ctor(MicroService.Service.Models.Enum.ShapeProperties)
    arguments:
    - type: MicroService.Service.Models.Enum.ShapeProperties
      value: 12
- uid: MicroService.Service.Models.ParkShape.ParkName
  commentId: P:MicroService.Service.Models.ParkShape.ParkName
  id: ParkName
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: ParkName
  nameWithType: ParkShape.ParkName
  fullName: MicroService.Service.Models.ParkShape.ParkName
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ParkName
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 9
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("PARK_NAME")]

      public string ParkName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("PARK_NAME")>

      Public Property ParkName As String
  overload: MicroService.Service.Models.ParkShape.ParkName*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: PARK_NAME
- uid: MicroService.Service.Models.ParkShape.ParkNumber
  commentId: P:MicroService.Service.Models.ParkShape.ParkNumber
  id: ParkNumber
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: ParkNumber
  nameWithType: ParkShape.ParkNumber
  fullName: MicroService.Service.Models.ParkShape.ParkNumber
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ParkNumber
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 12
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("PARKNUM")]

      public string ParkNumber { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("PARKNUM")>

      Public Property ParkNumber As String
  overload: MicroService.Service.Models.ParkShape.ParkNumber*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: PARKNUM
- uid: MicroService.Service.Models.ParkShape.SourceId
  commentId: P:MicroService.Service.Models.ParkShape.SourceId
  id: SourceId
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: SourceId
  nameWithType: ParkShape.SourceId
  fullName: MicroService.Service.Models.ParkShape.SourceId
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: SourceId
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 15
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("SOURCE_ID")]

      public long SourceId { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: >-
      <FeatureName("SOURCE_ID")>

      Public Property SourceId As Long
  overload: MicroService.Service.Models.ParkShape.SourceId*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SOURCE_ID
- uid: MicroService.Service.Models.ParkShape.FeatureCode
  commentId: P:MicroService.Service.Models.ParkShape.FeatureCode
  id: FeatureCode
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: FeatureCode
  nameWithType: ParkShape.FeatureCode
  fullName: MicroService.Service.Models.ParkShape.FeatureCode
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: FeatureCode
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 18
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("FEAT_CODE")]

      public int FeatureCode { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <FeatureName("FEAT_CODE")>

      Public Property FeatureCode As Integer
  overload: MicroService.Service.Models.ParkShape.FeatureCode*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: FEAT_CODE
- uid: MicroService.Service.Models.ParkShape.SubCode
  commentId: P:MicroService.Service.Models.ParkShape.SubCode
  id: SubCode
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: SubCode
  nameWithType: ParkShape.SubCode
  fullName: MicroService.Service.Models.ParkShape.SubCode
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: SubCode
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 21
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("SUB_CODE")]

      public int SubCode { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <FeatureName("SUB_CODE")>

      Public Property SubCode As Integer
  overload: MicroService.Service.Models.ParkShape.SubCode*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SUB_CODE
- uid: MicroService.Service.Models.ParkShape.LandUse
  commentId: P:MicroService.Service.Models.ParkShape.LandUse
  id: LandUse
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: LandUse
  nameWithType: ParkShape.LandUse
  fullName: MicroService.Service.Models.ParkShape.LandUse
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: LandUse
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 24
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("LANDUSE")]

      public string LandUse { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("LANDUSE")>

      Public Property LandUse As String
  overload: MicroService.Service.Models.ParkShape.LandUse*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: LANDUSE
- uid: MicroService.Service.Models.ParkShape.System
  commentId: P:MicroService.Service.Models.ParkShape.System
  id: System
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: System
  nameWithType: ParkShape.System
  fullName: MicroService.Service.Models.ParkShape.System
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: System
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 27
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("SYSTEM")]

      public string System { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("SYSTEM")>

      Public Property System As String
  overload: MicroService.Service.Models.ParkShape.System*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SYSTEM
- uid: MicroService.Service.Models.ParkShape.Status
  commentId: P:MicroService.Service.Models.ParkShape.Status
  id: Status
  parent: MicroService.Service.Models.ParkShape
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: ParkShape.Status
  fullName: MicroService.Service.Models.ParkShape.Status
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/ParkShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Status
    path: ../src/MicroService.Service/Models/ParkShape.cs
    startLine: 30
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("STATUS")]

      public string Status { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("STATUS")>

      Public Property Status As String
  overload: MicroService.Service.Models.ParkShape.Status*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: STATUS
references:
- uid: MicroService.Service.Models
  commentId: N:MicroService.Service.Models
  name: MicroService.Service.Models
  nameWithType: MicroService.Service.Models
  fullName: MicroService.Service.Models
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MicroService.Service.Models.Base.ShapeBase
  commentId: T:MicroService.Service.Models.Base.ShapeBase
  parent: MicroService.Service.Models.Base
  name: ShapeBase
  nameWithType: ShapeBase
  fullName: MicroService.Service.Models.Base.ShapeBase
- uid: MicroService.Service.Models.Base.ShapeBase.ShapeArea
  commentId: P:MicroService.Service.Models.Base.ShapeBase.ShapeArea
  parent: MicroService.Service.Models.Base.ShapeBase
  name: ShapeArea
  nameWithType: ShapeBase.ShapeArea
  fullName: MicroService.Service.Models.Base.ShapeBase.ShapeArea
- uid: MicroService.Service.Models.Base.ShapeBase.ShapeLength
  commentId: P:MicroService.Service.Models.Base.ShapeBase.ShapeLength
  parent: MicroService.Service.Models.Base.ShapeBase
  name: ShapeLength
  nameWithType: ShapeBase.ShapeLength
  fullName: MicroService.Service.Models.Base.ShapeBase.ShapeLength
- uid: MicroService.Service.Models.Base.ShapeBase.BoundingBox
  commentId: P:MicroService.Service.Models.Base.ShapeBase.BoundingBox
  parent: MicroService.Service.Models.Base.ShapeBase
  name: BoundingBox
  nameWithType: ShapeBase.BoundingBox
  fullName: MicroService.Service.Models.Base.ShapeBase.BoundingBox
- uid: MicroService.Service.Models.Base.ShapeBase.Geometry
  commentId: P:MicroService.Service.Models.Base.ShapeBase.Geometry
  parent: MicroService.Service.Models.Base.ShapeBase
  name: Geometry
  nameWithType: ShapeBase.Geometry
  fullName: MicroService.Service.Models.Base.ShapeBase.Geometry
- uid: MicroService.Service.Models.Base.ShapeBase.Feature
  commentId: P:MicroService.Service.Models.Base.ShapeBase.Feature
  parent: MicroService.Service.Models.Base.ShapeBase
  name: Feature
  nameWithType: ShapeBase.Feature
  fullName: MicroService.Service.Models.Base.ShapeBase.Feature
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: MicroService.Service.Models.ParkShape.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  parent: MicroService.Service.Helpers.ReflectionExtensions
  definition: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<ParkShape>(ParkShape)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<ParkShape>(ParkShape)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<MicroService.Service.Models.ParkShape>(MicroService.Service.Models.ParkShape)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of ParkShape)(ParkShape)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of MicroService.Service.Models.ParkShape)(MicroService.Service.Models.ParkShape)
  name.vb: ArePropertiesNotNull(Of ParkShape)(ParkShape)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Service.Models.ParkShape)
    name: ArePropertiesNotNull
  - name: <
  - uid: MicroService.Service.Models.ParkShape
    name: ParkShape
  - name: '>'
  - name: (
  - uid: MicroService.Service.Models.ParkShape
    name: ParkShape
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Service.Models.ParkShape)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Service.Models.ParkShape
    name: ParkShape
  - name: )
  - name: (
  - uid: MicroService.Service.Models.ParkShape
    name: ParkShape
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Service.Models.Base
  commentId: N:MicroService.Service.Models.Base
  name: MicroService.Service.Models.Base
  nameWithType: MicroService.Service.Models.Base
  fullName: MicroService.Service.Models.Base
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  - name: .
  - uid: MicroService.Service.Models.Base
    name: Base
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  - name: .
  - uid: MicroService.Service.Models.Base
    name: Base
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<T>(T)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<T>(T)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<T>(T)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  name.vb: ArePropertiesNotNull(Of T)(T)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: MicroService.Service.Helpers.ReflectionExtensions
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions
  parent: MicroService.Service.Helpers
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: MicroService.Service.Helpers.ReflectionExtensions
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: MicroService.Service.Models.ParkShape.ParkName*
  commentId: Overload:MicroService.Service.Models.ParkShape.ParkName
  name: ParkName
  nameWithType: ParkShape.ParkName
  fullName: MicroService.Service.Models.ParkShape.ParkName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MicroService.Service.Models.ParkShape.ParkNumber*
  commentId: Overload:MicroService.Service.Models.ParkShape.ParkNumber
  name: ParkNumber
  nameWithType: ParkShape.ParkNumber
  fullName: MicroService.Service.Models.ParkShape.ParkNumber
- uid: MicroService.Service.Models.ParkShape.SourceId*
  commentId: Overload:MicroService.Service.Models.ParkShape.SourceId
  name: SourceId
  nameWithType: ParkShape.SourceId
  fullName: MicroService.Service.Models.ParkShape.SourceId
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: MicroService.Service.Models.ParkShape.FeatureCode*
  commentId: Overload:MicroService.Service.Models.ParkShape.FeatureCode
  name: FeatureCode
  nameWithType: ParkShape.FeatureCode
  fullName: MicroService.Service.Models.ParkShape.FeatureCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MicroService.Service.Models.ParkShape.SubCode*
  commentId: Overload:MicroService.Service.Models.ParkShape.SubCode
  name: SubCode
  nameWithType: ParkShape.SubCode
  fullName: MicroService.Service.Models.ParkShape.SubCode
- uid: MicroService.Service.Models.ParkShape.LandUse*
  commentId: Overload:MicroService.Service.Models.ParkShape.LandUse
  name: LandUse
  nameWithType: ParkShape.LandUse
  fullName: MicroService.Service.Models.ParkShape.LandUse
- uid: MicroService.Service.Models.ParkShape.System*
  commentId: Overload:MicroService.Service.Models.ParkShape.System
  name: System
  nameWithType: ParkShape.System
  fullName: MicroService.Service.Models.ParkShape.System
- uid: MicroService.Service.Models.ParkShape.Status*
  commentId: Overload:MicroService.Service.Models.ParkShape.Status
  name: Status
  nameWithType: ParkShape.Status
  fullName: MicroService.Service.Models.ParkShape.Status
