### YamlMime:ManagedReference
items:
- uid: MicroService.Common.Health.VersionHealthCheck
  commentId: T:MicroService.Common.Health.VersionHealthCheck
  id: VersionHealthCheck
  parent: MicroService.Common.Health
  children:
  - MicroService.Common.Health.VersionHealthCheck.#ctor
  - MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: VersionHealthCheck
  nameWithType: VersionHealthCheck
  fullName: MicroService.Common.Health.VersionHealthCheck
  type: Class
  source:
    remote:
      path: src/MicroService.Common/Health/VersionHealthCheck.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: VersionHealthCheck
    path: ../src/MicroService.Common/Health/VersionHealthCheck.cs
    startLine: 9
  assemblies:
  - MicroService.Common
  namespace: MicroService.Common.Health
  syntax:
    content: 'public class VersionHealthCheck : IHealthCheck'
    content.vb: Public Class VersionHealthCheck Implements IHealthCheck
  inheritance:
  - System.Object
  implements:
  - Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - MicroService.Common.Health.VersionHealthCheck.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
- uid: MicroService.Common.Health.VersionHealthCheck.#ctor
  commentId: M:MicroService.Common.Health.VersionHealthCheck.#ctor
  id: '#ctor'
  parent: MicroService.Common.Health.VersionHealthCheck
  langs:
  - csharp
  - vb
  name: VersionHealthCheck()
  nameWithType: VersionHealthCheck.VersionHealthCheck()
  fullName: MicroService.Common.Health.VersionHealthCheck.VersionHealthCheck()
  type: Constructor
  source:
    remote:
      path: src/MicroService.Common/Health/VersionHealthCheck.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: .ctor
    path: ../src/MicroService.Common/Health/VersionHealthCheck.cs
    startLine: 17
  assemblies:
  - MicroService.Common
  namespace: MicroService.Common.Health
  syntax:
    content: public VersionHealthCheck()
    content.vb: Public Sub New()
  overload: MicroService.Common.Health.VersionHealthCheck.#ctor*
  nameWithType.vb: VersionHealthCheck.New()
  fullName.vb: MicroService.Common.Health.VersionHealthCheck.New()
  name.vb: New()
- uid: MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  commentId: M:MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  id: CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  parent: MicroService.Common.Health.VersionHealthCheck
  langs:
  - csharp
  - vb
  name: CheckHealthAsync(HealthCheckContext, CancellationToken)
  nameWithType: VersionHealthCheck.CheckHealthAsync(HealthCheckContext, CancellationToken)
  fullName: MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroService.Common/Health/VersionHealthCheck.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: CheckHealthAsync
    path: ../src/MicroService.Common/Health/VersionHealthCheck.cs
    startLine: 30
  assemblies:
  - MicroService.Common
  namespace: MicroService.Common.Health
  summary: "\nApplication Version Health Check\n"
  example: []
  syntax:
    content: public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default)
    parameters:
    - id: context
      type: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}
      description: ''
    content.vb: Public Function CheckHealthAsync(context As HealthCheckContext, cancellationToken As CancellationToken = Nothing) As Task(Of HealthCheckResult)
  overload: MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync*
  implements:
  - Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
references:
- uid: MicroService.Common.Health
  commentId: N:MicroService.Common.Health
  name: MicroService.Common.Health
  nameWithType: MicroService.Common.Health
  fullName: MicroService.Common.Health
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Common
    name: Common
  - name: .
  - uid: MicroService.Common.Health
    name: Health
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Common
    name: Common
  - name: .
  - uid: MicroService.Common.Health
    name: Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
  commentId: T:Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
  parent: Microsoft.Extensions.Diagnostics.HealthChecks
  isExternal: true
  name: IHealthCheck
  nameWithType: IHealthCheck
  fullName: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: MicroService.Common.Health.VersionHealthCheck.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  parent: MicroService.Service.Helpers.ReflectionExtensions
  definition: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<VersionHealthCheck>(VersionHealthCheck)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<VersionHealthCheck>(VersionHealthCheck)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<MicroService.Common.Health.VersionHealthCheck>(MicroService.Common.Health.VersionHealthCheck)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of VersionHealthCheck)(VersionHealthCheck)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of MicroService.Common.Health.VersionHealthCheck)(MicroService.Common.Health.VersionHealthCheck)
  name.vb: ArePropertiesNotNull(Of VersionHealthCheck)(VersionHealthCheck)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Common.Health.VersionHealthCheck)
    name: ArePropertiesNotNull
  - name: <
  - uid: MicroService.Common.Health.VersionHealthCheck
    name: VersionHealthCheck
  - name: '>'
  - name: (
  - uid: MicroService.Common.Health.VersionHealthCheck
    name: VersionHealthCheck
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Common.Health.VersionHealthCheck)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Common.Health.VersionHealthCheck
    name: VersionHealthCheck
  - name: )
  - name: (
  - uid: MicroService.Common.Health.VersionHealthCheck
    name: VersionHealthCheck
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Diagnostics.HealthChecks
  commentId: N:Microsoft.Extensions.Diagnostics.HealthChecks
  isExternal: true
  name: Microsoft.Extensions.Diagnostics.HealthChecks
  nameWithType: Microsoft.Extensions.Diagnostics.HealthChecks
  fullName: Microsoft.Extensions.Diagnostics.HealthChecks
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Diagnostics
    name: Diagnostics
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks
    name: HealthChecks
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Diagnostics
    name: Diagnostics
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks
    name: HealthChecks
    isExternal: true
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<T>(T)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<T>(T)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<T>(T)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  name.vb: ArePropertiesNotNull(Of T)(T)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: MicroService.Service.Helpers.ReflectionExtensions
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions
  parent: MicroService.Service.Helpers
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: MicroService.Service.Helpers.ReflectionExtensions
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: MicroService.Common.Health.VersionHealthCheck.#ctor*
  commentId: Overload:MicroService.Common.Health.VersionHealthCheck.#ctor
  name: VersionHealthCheck
  nameWithType: VersionHealthCheck.VersionHealthCheck
  fullName: MicroService.Common.Health.VersionHealthCheck.VersionHealthCheck
  nameWithType.vb: VersionHealthCheck.New
  fullName.vb: MicroService.Common.Health.VersionHealthCheck.New
  name.vb: New
- uid: MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync*
  commentId: Overload:MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync
  name: CheckHealthAsync
  nameWithType: VersionHealthCheck.CheckHealthAsync
  fullName: MicroService.Common.Health.VersionHealthCheck.CheckHealthAsync
- uid: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck
  isExternal: true
  name: CheckHealthAsync(HealthCheckContext, CancellationToken)
  nameWithType: IHealthCheck.CheckHealthAsync(HealthCheckContext, CancellationToken)
  fullName: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
    name: CheckHealthAsync
    isExternal: true
  - name: (
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
    name: HealthCheckContext
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
  - name: )
  spec.vb:
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
    name: CheckHealthAsync
    isExternal: true
  - name: (
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
    name: HealthCheckContext
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    isExternal: true
  - name: )
- uid: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
  commentId: T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
  parent: Microsoft.Extensions.Diagnostics.HealthChecks
  isExternal: true
  name: HealthCheckContext
  nameWithType: HealthCheckContext
  fullName: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HealthCheckResult>
  nameWithType: Task<HealthCheckResult>
  fullName: System.Threading.Tasks.Task<Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult>
  nameWithType.vb: Task(Of HealthCheckResult)
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult)
  name.vb: Task(Of HealthCheckResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult
    name: HealthCheckResult
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckResult
    name: HealthCheckResult
    isExternal: true
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
