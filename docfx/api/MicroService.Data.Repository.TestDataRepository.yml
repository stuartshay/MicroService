### YamlMime:ManagedReference
items:
- uid: MicroService.Data.Repository.TestDataRepository
  commentId: T:MicroService.Data.Repository.TestDataRepository
  id: TestDataRepository
  parent: MicroService.Data.Repository
  children:
  - MicroService.Data.Repository.TestDataRepository.#ctor(System.String)
  - MicroService.Data.Repository.TestDataRepository.Add(MicroService.Data.Models.TestData)
  - MicroService.Data.Repository.TestDataRepository.FindAll
  - MicroService.Data.Repository.TestDataRepository.FindById(System.Int32)
  - MicroService.Data.Repository.TestDataRepository.Remove(System.Int32)
  - MicroService.Data.Repository.TestDataRepository.Update(MicroService.Data.Models.TestData)
  langs:
  - csharp
  - vb
  name: TestDataRepository
  nameWithType: TestDataRepository
  fullName: MicroService.Data.Repository.TestDataRepository
  type: Class
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: TestDataRepository
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 11
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: 'public class TestDataRepository : ITestDataRepository, IRepository<TestData>'
    content.vb: Public Class TestDataRepository Implements ITestDataRepository, IRepository(Of TestData)
  inheritance:
  - System.Object
  implements:
  - MicroService.Data.Repository.ITestDataRepository
  - MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - MicroService.Data.Repository.TestDataRepository.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
- uid: MicroService.Data.Repository.TestDataRepository.#ctor(System.String)
  commentId: M:MicroService.Data.Repository.TestDataRepository.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: MicroService.Data.Repository.TestDataRepository
  langs:
  - csharp
  - vb
  name: TestDataRepository(string)
  nameWithType: TestDataRepository.TestDataRepository(string)
  fullName: MicroService.Data.Repository.TestDataRepository.TestDataRepository(string)
  type: Constructor
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: .ctor
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 15
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: public TestDataRepository(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
    content.vb: Public Sub New(connectionString As String)
  overload: MicroService.Data.Repository.TestDataRepository.#ctor*
  nameWithType.vb: TestDataRepository.New(String)
  fullName.vb: MicroService.Data.Repository.TestDataRepository.New(String)
  name.vb: New(String)
- uid: MicroService.Data.Repository.TestDataRepository.Add(MicroService.Data.Models.TestData)
  commentId: M:MicroService.Data.Repository.TestDataRepository.Add(MicroService.Data.Models.TestData)
  id: Add(MicroService.Data.Models.TestData)
  parent: MicroService.Data.Repository.TestDataRepository
  langs:
  - csharp
  - vb
  name: Add(TestData)
  nameWithType: TestDataRepository.Add(TestData)
  fullName: MicroService.Data.Repository.TestDataRepository.Add(MicroService.Data.Models.TestData)
  type: Method
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Add
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 22
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: public Task Add(TestData item)
    parameters:
    - id: item
      type: MicroService.Data.Models.TestData
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function Add(item As TestData) As Task
  overload: MicroService.Data.Repository.TestDataRepository.Add*
  implements:
  - MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Add(MicroService.Data.Models.TestData)
- uid: MicroService.Data.Repository.TestDataRepository.FindAll
  commentId: M:MicroService.Data.Repository.TestDataRepository.FindAll
  id: FindAll
  parent: MicroService.Data.Repository.TestDataRepository
  langs:
  - csharp
  - vb
  name: FindAll()
  nameWithType: TestDataRepository.FindAll()
  fullName: MicroService.Data.Repository.TestDataRepository.FindAll()
  type: Method
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: FindAll
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 27
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: public Task<IEnumerable<TestData>> FindAll()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{MicroService.Data.Models.TestData}}
    content.vb: Public Function FindAll() As Task(Of IEnumerable(Of TestData))
  overload: MicroService.Data.Repository.TestDataRepository.FindAll*
  implements:
  - MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindAll
- uid: MicroService.Data.Repository.TestDataRepository.FindById(System.Int32)
  commentId: M:MicroService.Data.Repository.TestDataRepository.FindById(System.Int32)
  id: FindById(System.Int32)
  parent: MicroService.Data.Repository.TestDataRepository
  langs:
  - csharp
  - vb
  name: FindById(int)
  nameWithType: TestDataRepository.FindById(int)
  fullName: MicroService.Data.Repository.TestDataRepository.FindById(int)
  type: Method
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: FindById
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 36
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: public Task<TestData> FindById(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task{MicroService.Data.Models.TestData}
    content.vb: Public Function FindById(id As Integer) As Task(Of TestData)
  overload: MicroService.Data.Repository.TestDataRepository.FindById*
  implements:
  - MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindById(System.Int32)
  nameWithType.vb: TestDataRepository.FindById(Integer)
  fullName.vb: MicroService.Data.Repository.TestDataRepository.FindById(Integer)
  name.vb: FindById(Integer)
- uid: MicroService.Data.Repository.TestDataRepository.Remove(System.Int32)
  commentId: M:MicroService.Data.Repository.TestDataRepository.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: MicroService.Data.Repository.TestDataRepository
  langs:
  - csharp
  - vb
  name: Remove(int)
  nameWithType: TestDataRepository.Remove(int)
  fullName: MicroService.Data.Repository.TestDataRepository.Remove(int)
  type: Method
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Remove
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 46
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: public Task Remove(int id)
    parameters:
    - id: id
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function Remove(id As Integer) As Task
  overload: MicroService.Data.Repository.TestDataRepository.Remove*
  implements:
  - MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Remove(System.Int32)
  nameWithType.vb: TestDataRepository.Remove(Integer)
  fullName.vb: MicroService.Data.Repository.TestDataRepository.Remove(Integer)
  name.vb: Remove(Integer)
- uid: MicroService.Data.Repository.TestDataRepository.Update(MicroService.Data.Models.TestData)
  commentId: M:MicroService.Data.Repository.TestDataRepository.Update(MicroService.Data.Models.TestData)
  id: Update(MicroService.Data.Models.TestData)
  parent: MicroService.Data.Repository.TestDataRepository
  langs:
  - csharp
  - vb
  name: Update(TestData)
  nameWithType: TestDataRepository.Update(TestData)
  fullName: MicroService.Data.Repository.TestDataRepository.Update(MicroService.Data.Models.TestData)
  type: Method
  source:
    remote:
      path: src/MicroService.Data/Repository/TestDataRepository.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Update
    path: ../src/MicroService.Data/Repository/TestDataRepository.cs
    startLine: 51
  assemblies:
  - MicroService.Data
  namespace: MicroService.Data.Repository
  syntax:
    content: public Task Update(TestData item)
    parameters:
    - id: item
      type: MicroService.Data.Models.TestData
    return:
      type: System.Threading.Tasks.Task
    content.vb: Public Function Update(item As TestData) As Task
  overload: MicroService.Data.Repository.TestDataRepository.Update*
  implements:
  - MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Update(MicroService.Data.Models.TestData)
references:
- uid: MicroService.Data.Repository
  commentId: N:MicroService.Data.Repository
  name: MicroService.Data.Repository
  nameWithType: MicroService.Data.Repository
  fullName: MicroService.Data.Repository
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Data
    name: Data
  - name: .
  - uid: MicroService.Data.Repository
    name: Repository
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Data
    name: Data
  - name: .
  - uid: MicroService.Data.Repository
    name: Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MicroService.Data.Repository.ITestDataRepository
  commentId: T:MicroService.Data.Repository.ITestDataRepository
  parent: MicroService.Data.Repository
  name: ITestDataRepository
  nameWithType: ITestDataRepository
  fullName: MicroService.Data.Repository.ITestDataRepository
- uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  commentId: T:MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  parent: MicroService.Data.Repository
  definition: MicroService.Data.Repository.IRepository`1
  name: IRepository<TestData>
  nameWithType: IRepository<TestData>
  fullName: MicroService.Data.Repository.IRepository<MicroService.Data.Models.TestData>
  nameWithType.vb: IRepository(Of TestData)
  fullName.vb: MicroService.Data.Repository.IRepository(Of MicroService.Data.Models.TestData)
  name.vb: IRepository(Of TestData)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1
    name: IRepository
  - name: <
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: '>'
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1
    name: IRepository
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: MicroService.Data.Repository.TestDataRepository.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  parent: MicroService.Service.Helpers.ReflectionExtensions
  definition: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<TestDataRepository>(TestDataRepository)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<TestDataRepository>(TestDataRepository)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<MicroService.Data.Repository.TestDataRepository>(MicroService.Data.Repository.TestDataRepository)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of TestDataRepository)(TestDataRepository)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of MicroService.Data.Repository.TestDataRepository)(MicroService.Data.Repository.TestDataRepository)
  name.vb: ArePropertiesNotNull(Of TestDataRepository)(TestDataRepository)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Data.Repository.TestDataRepository)
    name: ArePropertiesNotNull
  - name: <
  - uid: MicroService.Data.Repository.TestDataRepository
    name: TestDataRepository
  - name: '>'
  - name: (
  - uid: MicroService.Data.Repository.TestDataRepository
    name: TestDataRepository
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Data.Repository.TestDataRepository)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Data.Repository.TestDataRepository
    name: TestDataRepository
  - name: )
  - name: (
  - uid: MicroService.Data.Repository.TestDataRepository
    name: TestDataRepository
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Data.Repository.IRepository`1
  commentId: T:MicroService.Data.Repository.IRepository`1
  name: IRepository<T>
  nameWithType: IRepository<T>
  fullName: MicroService.Data.Repository.IRepository<T>
  nameWithType.vb: IRepository(Of T)
  fullName.vb: MicroService.Data.Repository.IRepository(Of T)
  name.vb: IRepository(Of T)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1
    name: IRepository
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1
    name: IRepository
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<T>(T)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<T>(T)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<T>(T)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  name.vb: ArePropertiesNotNull(Of T)(T)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: MicroService.Service.Helpers.ReflectionExtensions
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions
  parent: MicroService.Service.Helpers
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: MicroService.Service.Helpers.ReflectionExtensions
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: MicroService.Data.Repository.TestDataRepository.#ctor*
  commentId: Overload:MicroService.Data.Repository.TestDataRepository.#ctor
  name: TestDataRepository
  nameWithType: TestDataRepository.TestDataRepository
  fullName: MicroService.Data.Repository.TestDataRepository.TestDataRepository
  nameWithType.vb: TestDataRepository.New
  fullName.vb: MicroService.Data.Repository.TestDataRepository.New
  name.vb: New
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MicroService.Data.Repository.TestDataRepository.Add*
  commentId: Overload:MicroService.Data.Repository.TestDataRepository.Add
  name: Add
  nameWithType: TestDataRepository.Add
  fullName: MicroService.Data.Repository.TestDataRepository.Add
- uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Add(MicroService.Data.Models.TestData)
  commentId: M:MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Add(MicroService.Data.Models.TestData)
  parent: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  definition: MicroService.Data.Repository.IRepository`1.Add(`0)
  name: Add(TestData)
  nameWithType: IRepository<TestData>.Add(TestData)
  fullName: MicroService.Data.Repository.IRepository<MicroService.Data.Models.TestData>.Add(MicroService.Data.Models.TestData)
  nameWithType.vb: IRepository(Of TestData).Add(TestData)
  fullName.vb: MicroService.Data.Repository.IRepository(Of MicroService.Data.Models.TestData).Add(MicroService.Data.Models.TestData)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Add(MicroService.Data.Models.TestData)
    name: Add
  - name: (
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Add(MicroService.Data.Models.TestData)
    name: Add
  - name: (
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
- uid: MicroService.Data.Models.TestData
  commentId: T:MicroService.Data.Models.TestData
  parent: MicroService.Data.Models
  name: TestData
  nameWithType: TestData
  fullName: MicroService.Data.Models.TestData
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: MicroService.Data.Repository.IRepository`1.Add(`0)
  commentId: M:MicroService.Data.Repository.IRepository`1.Add(`0)
  name: Add(T)
  nameWithType: IRepository<T>.Add(T)
  fullName: MicroService.Data.Repository.IRepository<T>.Add(T)
  nameWithType.vb: IRepository(Of T).Add(T)
  fullName.vb: MicroService.Data.Repository.IRepository(Of T).Add(T)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1.Add(`0)
    name: Add
  - name: (
  - name: T
  - name: )
- uid: MicroService.Data.Models
  commentId: N:MicroService.Data.Models
  name: MicroService.Data.Models
  nameWithType: MicroService.Data.Models
  fullName: MicroService.Data.Models
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Data
    name: Data
  - name: .
  - uid: MicroService.Data.Models
    name: Models
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Data
    name: Data
  - name: .
  - uid: MicroService.Data.Models
    name: Models
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
- uid: MicroService.Data.Repository.TestDataRepository.FindAll*
  commentId: Overload:MicroService.Data.Repository.TestDataRepository.FindAll
  name: FindAll
  nameWithType: TestDataRepository.FindAll
  fullName: MicroService.Data.Repository.TestDataRepository.FindAll
- uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindAll
  commentId: M:MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindAll
  parent: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  definition: MicroService.Data.Repository.IRepository`1.FindAll
  name: FindAll()
  nameWithType: IRepository<TestData>.FindAll()
  fullName: MicroService.Data.Repository.IRepository<MicroService.Data.Models.TestData>.FindAll()
  nameWithType.vb: IRepository(Of TestData).FindAll()
  fullName.vb: MicroService.Data.Repository.IRepository(Of MicroService.Data.Models.TestData).FindAll()
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindAll
    name: FindAll
  - name: (
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindAll
    name: FindAll
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{MicroService.Data.Models.TestData}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{MicroService.Data.Models.TestData}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<TestData>>
  nameWithType: Task<IEnumerable<TestData>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<MicroService.Data.Models.TestData>>
  nameWithType.vb: Task(Of IEnumerable(Of TestData))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of MicroService.Data.Models.TestData))
  name.vb: Task(Of IEnumerable(Of TestData))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: <
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
  - name: )
- uid: MicroService.Data.Repository.IRepository`1.FindAll
  commentId: M:MicroService.Data.Repository.IRepository`1.FindAll
  name: FindAll()
  nameWithType: IRepository<T>.FindAll()
  fullName: MicroService.Data.Repository.IRepository<T>.FindAll()
  nameWithType.vb: IRepository(Of T).FindAll()
  fullName.vb: MicroService.Data.Repository.IRepository(Of T).FindAll()
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1.FindAll
    name: FindAll
  - name: (
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1.FindAll
    name: FindAll
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: MicroService.Data.Repository.TestDataRepository.FindById*
  commentId: Overload:MicroService.Data.Repository.TestDataRepository.FindById
  name: FindById
  nameWithType: TestDataRepository.FindById
  fullName: MicroService.Data.Repository.TestDataRepository.FindById
- uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindById(System.Int32)
  commentId: M:MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindById(System.Int32)
  parent: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  definition: MicroService.Data.Repository.IRepository`1.FindById(System.Int32)
  name: FindById(int)
  nameWithType: IRepository<TestData>.FindById(int)
  fullName: MicroService.Data.Repository.IRepository<MicroService.Data.Models.TestData>.FindById(int)
  nameWithType.vb: IRepository(Of TestData).FindById(Integer)
  fullName.vb: MicroService.Data.Repository.IRepository(Of MicroService.Data.Models.TestData).FindById(Integer)
  name.vb: FindById(Integer)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindById(System.Int32)
    name: FindById
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.FindById(System.Int32)
    name: FindById
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Threading.Tasks.Task{MicroService.Data.Models.TestData}
  commentId: T:System.Threading.Tasks.Task{MicroService.Data.Models.TestData}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TestData>
  nameWithType: Task<TestData>
  fullName: System.Threading.Tasks.Task<MicroService.Data.Models.TestData>
  nameWithType.vb: Task(Of TestData)
  fullName.vb: System.Threading.Tasks.Task(Of MicroService.Data.Models.TestData)
  name.vb: Task(Of TestData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: <
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
- uid: MicroService.Data.Repository.IRepository`1.FindById(System.Int32)
  commentId: M:MicroService.Data.Repository.IRepository`1.FindById(System.Int32)
  isExternal: true
  name: FindById(int)
  nameWithType: IRepository<T>.FindById(int)
  fullName: MicroService.Data.Repository.IRepository<T>.FindById(int)
  nameWithType.vb: IRepository(Of T).FindById(Integer)
  fullName.vb: MicroService.Data.Repository.IRepository(Of T).FindById(Integer)
  name.vb: FindById(Integer)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1.FindById(System.Int32)
    name: FindById
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1.FindById(System.Int32)
    name: FindById
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: MicroService.Data.Repository.TestDataRepository.Remove*
  commentId: Overload:MicroService.Data.Repository.TestDataRepository.Remove
  name: Remove
  nameWithType: TestDataRepository.Remove
  fullName: MicroService.Data.Repository.TestDataRepository.Remove
- uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Remove(System.Int32)
  commentId: M:MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Remove(System.Int32)
  parent: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  definition: MicroService.Data.Repository.IRepository`1.Remove(System.Int32)
  name: Remove(int)
  nameWithType: IRepository<TestData>.Remove(int)
  fullName: MicroService.Data.Repository.IRepository<MicroService.Data.Models.TestData>.Remove(int)
  nameWithType.vb: IRepository(Of TestData).Remove(Integer)
  fullName.vb: MicroService.Data.Repository.IRepository(Of MicroService.Data.Models.TestData).Remove(Integer)
  name.vb: Remove(Integer)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Remove(System.Int32)
    name: Remove
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Remove(System.Int32)
    name: Remove
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: MicroService.Data.Repository.IRepository`1.Remove(System.Int32)
  commentId: M:MicroService.Data.Repository.IRepository`1.Remove(System.Int32)
  isExternal: true
  name: Remove(int)
  nameWithType: IRepository<T>.Remove(int)
  fullName: MicroService.Data.Repository.IRepository<T>.Remove(int)
  nameWithType.vb: IRepository(Of T).Remove(Integer)
  fullName.vb: MicroService.Data.Repository.IRepository(Of T).Remove(Integer)
  name.vb: Remove(Integer)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1.Remove(System.Int32)
    name: Remove
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1.Remove(System.Int32)
    name: Remove
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
  - name: )
- uid: MicroService.Data.Repository.TestDataRepository.Update*
  commentId: Overload:MicroService.Data.Repository.TestDataRepository.Update
  name: Update
  nameWithType: TestDataRepository.Update
  fullName: MicroService.Data.Repository.TestDataRepository.Update
- uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Update(MicroService.Data.Models.TestData)
  commentId: M:MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Update(MicroService.Data.Models.TestData)
  parent: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}
  definition: MicroService.Data.Repository.IRepository`1.Update(`0)
  name: Update(TestData)
  nameWithType: IRepository<TestData>.Update(TestData)
  fullName: MicroService.Data.Repository.IRepository<MicroService.Data.Models.TestData>.Update(MicroService.Data.Models.TestData)
  nameWithType.vb: IRepository(Of TestData).Update(TestData)
  fullName.vb: MicroService.Data.Repository.IRepository(Of MicroService.Data.Models.TestData).Update(MicroService.Data.Models.TestData)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Update(MicroService.Data.Models.TestData)
    name: Update
  - name: (
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository{MicroService.Data.Models.TestData}.Update(MicroService.Data.Models.TestData)
    name: Update
  - name: (
  - uid: MicroService.Data.Models.TestData
    name: TestData
  - name: )
- uid: MicroService.Data.Repository.IRepository`1.Update(`0)
  commentId: M:MicroService.Data.Repository.IRepository`1.Update(`0)
  name: Update(T)
  nameWithType: IRepository<T>.Update(T)
  fullName: MicroService.Data.Repository.IRepository<T>.Update(T)
  nameWithType.vb: IRepository(Of T).Update(T)
  fullName.vb: MicroService.Data.Repository.IRepository(Of T).Update(T)
  spec.csharp:
  - uid: MicroService.Data.Repository.IRepository`1.Update(`0)
    name: Update
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Data.Repository.IRepository`1.Update(`0)
    name: Update
  - name: (
  - name: T
  - name: )
