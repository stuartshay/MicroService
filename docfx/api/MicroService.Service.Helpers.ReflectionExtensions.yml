### YamlMime:ManagedReference
items:
- uid: MicroService.Service.Helpers.ReflectionExtensions
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions
  id: ReflectionExtensions
  parent: MicroService.Service.Helpers
  children:
  - MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  - MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty``1(System.Object,System.String)
  - MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute``1(System.Type)
  langs:
  - csharp
  - vb
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: MicroService.Service.Helpers.ReflectionExtensions
  type: Class
  source:
    remote:
      path: src/MicroService.Service/Helpers/ReflectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ReflectionExtensions
    path: ../src/MicroService.Service/Helpers/ReflectionExtensions.cs
    startLine: 7
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Helpers
  syntax:
    content: public static class ReflectionExtensions
    content.vb: Public Module ReflectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  id: ArePropertiesNotNull``1(``0)
  isExtensionMethod: true
  parent: MicroService.Service.Helpers.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: ArePropertiesNotNull<T>(T)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<T>(T)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<T>(T)
  type: Method
  source:
    remote:
      path: src/MicroService.Service/Helpers/ReflectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ArePropertiesNotNull
    path: ../src/MicroService.Service/Helpers/ReflectionExtensions.cs
    startLine: 9
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Helpers
  syntax:
    content: public static bool ArePropertiesNotNull<T>(this T obj)
    parameters:
    - id: obj
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function ArePropertiesNotNull(Of T)(obj As T) As Boolean
  overload: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull*
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  name.vb: ArePropertiesNotNull(Of T)(T)
- uid: MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty``1(System.Object,System.String)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty``1(System.Object,System.String)
  id: GetAttributeFromProperty``1(System.Object,System.String)
  parent: MicroService.Service.Helpers.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetAttributeFromProperty<TAttribute>(object, string)
  nameWithType: ReflectionExtensions.GetAttributeFromProperty<TAttribute>(object, string)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty<TAttribute>(object, string)
  type: Method
  source:
    remote:
      path: src/MicroService.Service/Helpers/ReflectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: GetAttributeFromProperty
    path: ../src/MicroService.Service/Helpers/ReflectionExtensions.cs
    startLine: 23
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Helpers
  syntax:
    content: 'public static TAttribute GetAttributeFromProperty<TAttribute>(object obj, string propertyName) where TAttribute : Attribute'
    parameters:
    - id: obj
      type: System.Object
    - id: propertyName
      type: System.String
    typeParameters:
    - id: TAttribute
    return:
      type: '{TAttribute}'
    content.vb: Public Shared Function GetAttributeFromProperty(Of TAttribute As Attribute)(obj As Object, propertyName As String) As TAttribute
  overload: MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty*
  nameWithType.vb: ReflectionExtensions.GetAttributeFromProperty(Of TAttribute)(Object, String)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty(Of TAttribute)(Object, String)
  name.vb: GetAttributeFromProperty(Of TAttribute)(Object, String)
- uid: MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute``1(System.Type)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute``1(System.Type)
  id: GetPropertiesWithCustomAttribute``1(System.Type)
  isExtensionMethod: true
  parent: MicroService.Service.Helpers.ReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetPropertiesWithCustomAttribute<T>(Type)
  nameWithType: ReflectionExtensions.GetPropertiesWithCustomAttribute<T>(Type)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute<T>(System.Type)
  type: Method
  source:
    remote:
      path: src/MicroService.Service/Helpers/ReflectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: GetPropertiesWithCustomAttribute
    path: ../src/MicroService.Service/Helpers/ReflectionExtensions.cs
    startLine: 29
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Helpers
  syntax:
    content: 'public static PropertyInfo[] GetPropertiesWithCustomAttribute<T>(this Type type) where T : Attribute'
    parameters:
    - id: type
      type: System.Type
    typeParameters:
    - id: T
    return:
      type: System.Reflection.PropertyInfo[]
    content.vb: Public Shared Function GetPropertiesWithCustomAttribute(Of T As Attribute)(type As Type) As PropertyInfo()
  overload: MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute*
  nameWithType.vb: ReflectionExtensions.GetPropertiesWithCustomAttribute(Of T)(Type)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute(Of T)(System.Type)
  name.vb: GetPropertiesWithCustomAttribute(Of T)(Type)
references:
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull*
  commentId: Overload:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull
  name: ArePropertiesNotNull
  nameWithType: ReflectionExtensions.ArePropertiesNotNull
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty*
  commentId: Overload:MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty
  name: GetAttributeFromProperty
  nameWithType: ReflectionExtensions.GetAttributeFromProperty
  fullName: MicroService.Service.Helpers.ReflectionExtensions.GetAttributeFromProperty
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: '{TAttribute}'
  commentId: '!:TAttribute'
  definition: TAttribute
  name: TAttribute
  nameWithType: TAttribute
  fullName: TAttribute
- uid: TAttribute
  name: TAttribute
  nameWithType: TAttribute
  fullName: TAttribute
- uid: MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute*
  commentId: Overload:MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute
  name: GetPropertiesWithCustomAttribute
  nameWithType: ReflectionExtensions.GetPropertiesWithCustomAttribute
  fullName: MicroService.Service.Helpers.ReflectionExtensions.GetPropertiesWithCustomAttribute
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.PropertyInfo[]
  isExternal: true
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  nameWithType.vb: PropertyInfo()
  fullName.vb: System.Reflection.PropertyInfo()
  name.vb: PropertyInfo()
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: (
  - name: )
