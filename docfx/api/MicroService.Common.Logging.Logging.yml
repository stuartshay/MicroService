### YamlMime:ManagedReference
items:
- uid: MicroService.Common.Logging.Logging
  commentId: T:MicroService.Common.Logging.Logging
  id: Logging
  parent: MicroService.Common.Logging
  children:
  - MicroService.Common.Logging.Logging.ConfigureLogger
  langs:
  - csharp
  - vb
  name: Logging
  nameWithType: Logging
  fullName: MicroService.Common.Logging.Logging
  type: Class
  source:
    remote:
      path: src/MicroService.Common/Logging/Logging.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Logging
    path: ../src/MicroService.Common/Logging/Logging.cs
    startLine: 11
  assemblies:
  - MicroService.Common
  namespace: MicroService.Common.Logging
  syntax:
    content: public static class Logging
    content.vb: Public Module Logging
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MicroService.Common.Logging.Logging.ConfigureLogger
  commentId: P:MicroService.Common.Logging.Logging.ConfigureLogger
  id: ConfigureLogger
  parent: MicroService.Common.Logging.Logging
  langs:
  - csharp
  - vb
  name: ConfigureLogger
  nameWithType: Logging.ConfigureLogger
  fullName: MicroService.Common.Logging.Logging.ConfigureLogger
  type: Property
  source:
    remote:
      path: src/MicroService.Common/Logging/Logging.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ConfigureLogger
    path: ../src/MicroService.Common/Logging/Logging.cs
    startLine: 13
  assemblies:
  - MicroService.Common
  namespace: MicroService.Common.Logging
  syntax:
    content: public static Action<HostBuilderContext, LoggerConfiguration> ConfigureLogger { get; }
    parameters: []
    return:
      type: System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Serilog.LoggerConfiguration}
    content.vb: Public Shared ReadOnly Property ConfigureLogger As Action(Of HostBuilderContext, LoggerConfiguration)
  overload: MicroService.Common.Logging.Logging.ConfigureLogger*
references:
- uid: MicroService.Common.Logging
  commentId: N:MicroService.Common.Logging
  name: MicroService.Common.Logging
  nameWithType: MicroService.Common.Logging
  fullName: MicroService.Common.Logging
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Common
    name: Common
  - name: .
  - uid: MicroService.Common.Logging
    name: Logging
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Common
    name: Common
  - name: .
  - uid: MicroService.Common.Logging
    name: Logging
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Common.Logging.Logging.ConfigureLogger*
  commentId: Overload:MicroService.Common.Logging.Logging.ConfigureLogger
  name: ConfigureLogger
  nameWithType: Logging.ConfigureLogger
  fullName: MicroService.Common.Logging.Logging.ConfigureLogger
- uid: System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Serilog.LoggerConfiguration}
  commentId: T:System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,Serilog.LoggerConfiguration}
  parent: System
  definition: System.Action`2
  name: Action<HostBuilderContext, LoggerConfiguration>
  nameWithType: Action<HostBuilderContext, LoggerConfiguration>
  fullName: System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration>
  nameWithType.vb: Action(Of HostBuilderContext, LoggerConfiguration)
  fullName.vb: System.Action(Of Microsoft.Extensions.Hosting.HostBuilderContext, Serilog.LoggerConfiguration)
  name.vb: Action(Of HostBuilderContext, LoggerConfiguration)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - uid: Microsoft.Extensions.Hosting.HostBuilderContext
    name: HostBuilderContext
    isExternal: true
  - name: ','
  - name: " "
  - uid: Serilog.LoggerConfiguration
    name: LoggerConfiguration
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: Microsoft.Extensions.Hosting.HostBuilderContext
    name: HostBuilderContext
    isExternal: true
  - name: ','
  - name: " "
  - uid: Serilog.LoggerConfiguration
    name: LoggerConfiguration
    isExternal: true
  - name: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: true
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullName.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: <
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
