### YamlMime:ManagedReference
items:
- uid: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1
  id: ReflectionExtensions.PropertyCache`1
  parent: MicroService.Service.Helpers
  children:
  - MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1.PublicProperties
  langs:
  - csharp
  - vb
  name: ReflectionExtensions.PropertyCache<T>
  nameWithType: ReflectionExtensions.PropertyCache<T>
  fullName: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache<T>
  type: Class
  source:
    remote:
      path: src/MicroService.Service/Helpers/ReflectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: PropertyCache
    path: ../src/MicroService.Service/Helpers/ReflectionExtensions.cs
    startLine: 15
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Helpers
  syntax:
    content: public static class ReflectionExtensions.PropertyCache<T>
    typeParameters:
    - id: T
    content.vb: Public Module ReflectionExtensions.PropertyCache(Of T)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ReflectionExtensions.PropertyCache(Of T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache(Of T)
  name.vb: ReflectionExtensions.PropertyCache(Of T)
- uid: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1.PublicProperties
  commentId: P:MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1.PublicProperties
  id: PublicProperties
  parent: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1
  langs:
  - csharp
  - vb
  name: PublicProperties
  nameWithType: ReflectionExtensions.PropertyCache<T>.PublicProperties
  fullName: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache<T>.PublicProperties
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Helpers/ReflectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: PublicProperties
    path: ../src/MicroService.Service/Helpers/ReflectionExtensions.cs
    startLine: 20
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Helpers
  syntax:
    content: public static IReadOnlyCollection<PropertyInfo> PublicProperties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyCollection{System.Reflection.PropertyInfo}
    content.vb: Public Shared ReadOnly Property PublicProperties As IReadOnlyCollection(Of PropertyInfo)
  overload: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1.PublicProperties*
  nameWithType.vb: ReflectionExtensions.PropertyCache(Of T).PublicProperties
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache(Of T).PublicProperties
references:
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1.PublicProperties*
  commentId: Overload:MicroService.Service.Helpers.ReflectionExtensions.PropertyCache`1.PublicProperties
  name: PublicProperties
  nameWithType: ReflectionExtensions.PropertyCache<T>.PublicProperties
  fullName: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache<T>.PublicProperties
  nameWithType.vb: ReflectionExtensions.PropertyCache(Of T).PublicProperties
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.PropertyCache(Of T).PublicProperties
- uid: System.Collections.Generic.IReadOnlyCollection{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<PropertyInfo>
  nameWithType: IReadOnlyCollection<PropertyInfo>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Reflection.PropertyInfo>
  nameWithType.vb: IReadOnlyCollection(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Reflection.PropertyInfo)
  name.vb: IReadOnlyCollection(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    isExternal: true
  - name: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
