### YamlMime:ManagedReference
items:
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  commentId: T:MicroService.WebApi.Extensions.ServiceCollectionExtensions
  id: ServiceCollectionExtensions
  parent: MicroService.WebApi.Extensions
  children:
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig})
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment)
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  - MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)
  langs:
  - csharp
  - vb
  name: ServiceCollectionExtensions
  nameWithType: ServiceCollectionExtensions
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  type: Class
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: ServiceCollectionExtensions
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 17
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nService Collection Extensions\n"
  example: []
  syntax:
    content: public static class ServiceCollectionExtensions
    content.vb: Public Module ServiceCollectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  id: DisplayConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: DisplayConfiguration(IServiceCollection, IConfiguration)
  nameWithType: ServiceCollectionExtensions.DisplayConfiguration(IServiceCollection, IConfiguration)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: DisplayConfiguration
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 25
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nDisplay Configuration\n"
  example: []
  syntax:
    content: public static void DisplayConfiguration(this IServiceCollection services, IConfiguration configuration)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: ''
    content.vb: Public Shared Sub DisplayConfiguration(services As IServiceCollection, configuration As IConfiguration)
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddCorsConfiguration(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddCorsConfiguration(IServiceCollection)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: AddCorsConfiguration
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 41
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nCORS Configuration\n"
  example: []
  syntax:
    content: public static void AddCorsConfiguration(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Sub AddCorsConfiguration(services As IServiceCollection)
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddCustomApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddCustomApiVersioning(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddCustomApiVersioning(IServiceCollection)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: AddCustomApiVersioning
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 62
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nApi Versioning\n"
  example: []
  syntax:
    content: public static void AddCustomApiVersioning(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Sub AddCustomApiVersioning(services As IServiceCollection)
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  id: AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddSwaggerConfiguration(IServiceCollection)
  nameWithType: ServiceCollectionExtensions.AddSwaggerConfiguration(IServiceCollection)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: AddSwaggerConfiguration
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 83
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nSwagger Configuration\n"
  example: []
  syntax:
    content: public static void AddSwaggerConfiguration(this IServiceCollection services)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Sub AddSwaggerConfiguration(services As IServiceCollection)
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment)
  id: AddOpenTelemetryTracingCustom(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Hosting.IHostEnvironment)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddOpenTelemetryTracingCustom(IServiceCollection, IConfiguration, IHostEnvironment)
  nameWithType: ServiceCollectionExtensions.AddOpenTelemetryTracingCustom(IServiceCollection, IConfiguration, IHostEnvironment)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration, Microsoft.Extensions.Hosting.IHostEnvironment)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: AddOpenTelemetryTracingCustom
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 125
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nOpen Telemetry Tracing Custom\n"
  example: []
  syntax:
    content: public static void AddOpenTelemetryTracingCustom(this IServiceCollection services, IConfiguration configuration, IHostEnvironment env)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: ''
    - id: env
      type: Microsoft.Extensions.Hosting.IHostEnvironment
      description: ''
    content.vb: Public Shared Sub AddOpenTelemetryTracingCustom(services As IServiceCollection, configuration As IConfiguration, env As IHostEnvironment)
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  id: AddCustomControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddCustomControllers(IServiceCollection, IConfiguration)
  nameWithType: ServiceCollectionExtensions.AddCustomControllers(IServiceCollection, IConfiguration)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: AddCustomControllers
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 150
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nCustom Controllers\n"
  example: []
  syntax:
    content: public static IServiceCollection AddCustomControllers(this IServiceCollection services, IConfiguration configuration)
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    - id: configuration
      type: Microsoft.Extensions.Configuration.IConfiguration
      description: ''
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddCustomControllers(services As IServiceCollection, configuration As IConfiguration) As IServiceCollection
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)
  id: UseSwaggerCustom(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: UseSwaggerCustom(IApplicationBuilder, IApiVersionDescriptionProvider)
  nameWithType: ServiceCollectionExtensions.UseSwaggerCustom(IApplicationBuilder, IApiVersionDescriptionProvider)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom(Microsoft.AspNetCore.Builder.IApplicationBuilder, Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: UseSwaggerCustom
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 181
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\nConfigure Swagger\n"
  example: []
  syntax:
    content: public static void UseSwaggerCustom(this IApplicationBuilder app, IApiVersionDescriptionProvider provider)
    parameters:
    - id: app
      type: Microsoft.AspNetCore.Builder.IApplicationBuilder
      description: ''
    - id: provider
      type: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider
      description: ''
    content.vb: Public Shared Sub UseSwaggerCustom(app As IApplicationBuilder, provider As IApiVersionDescriptionProvider)
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom*
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig})
  commentId: M:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig})
  id: AddCronJob``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig})
  isExtensionMethod: true
  parent: MicroService.WebApi.Extensions.ServiceCollectionExtensions
  langs:
  - csharp
  - vb
  name: AddCronJob<T>(IServiceCollection, Action<IScheduleConfig>)
  nameWithType: ServiceCollectionExtensions.AddCronJob<T>(IServiceCollection, Action<IScheduleConfig>)
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob<T>(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action<MicroService.WebApi.Services.Cron.IScheduleConfig>)
  type: Method
  source:
    remote:
      path: src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: AddCronJob
    path: ../src/MicroService.WebApi/Extensions/ServiceCollectionExtensions.cs
    startLine: 206
  assemblies:
  - MicroService.WebApi
  namespace: MicroService.WebApi.Extensions
  summary: "\n\n"
  example: []
  syntax:
    content: 'public static IServiceCollection AddCronJob<T>(this IServiceCollection services, Action<IScheduleConfig> options) where T : CronJobService'
    parameters:
    - id: services
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    - id: options
      type: System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig}
      description: ''
    typeParameters:
    - id: T
      description: CronJobService Type
    return:
      type: Microsoft.Extensions.DependencyInjection.IServiceCollection
      description: ''
    content.vb: Public Shared Function AddCronJob(Of T As CronJobService)(services As IServiceCollection, options As Action(Of IScheduleConfig)) As IServiceCollection
  overload: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
  nameWithType.vb: ServiceCollectionExtensions.AddCronJob(Of T)(IServiceCollection, Action(Of IScheduleConfig))
  fullName.vb: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob(Of T)(Microsoft.Extensions.DependencyInjection.IServiceCollection, System.Action(Of MicroService.WebApi.Services.Cron.IScheduleConfig))
  name.vb: AddCronJob(Of T)(IServiceCollection, Action(Of IScheduleConfig))
references:
- uid: MicroService.WebApi.Extensions
  commentId: N:MicroService.WebApi.Extensions
  name: MicroService.WebApi.Extensions
  nameWithType: MicroService.WebApi.Extensions
  fullName: MicroService.WebApi.Extensions
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.WebApi
    name: WebApi
  - name: .
  - uid: MicroService.WebApi.Extensions
    name: Extensions
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.WebApi
    name: WebApi
  - name: .
  - uid: MicroService.WebApi.Extensions
    name: Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration
  name: DisplayConfiguration
  nameWithType: ServiceCollectionExtensions.DisplayConfiguration
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.DisplayConfiguration
- uid: Microsoft.Extensions.DependencyInjection.IServiceCollection
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceCollection
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceCollection
  nameWithType: IServiceCollection
  fullName: Microsoft.Extensions.DependencyInjection.IServiceCollection
- uid: Microsoft.Extensions.Configuration.IConfiguration
  commentId: T:Microsoft.Extensions.Configuration.IConfiguration
  parent: Microsoft.Extensions.Configuration
  isExternal: true
  name: IConfiguration
  nameWithType: IConfiguration
  fullName: Microsoft.Extensions.Configuration.IConfiguration
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.DependencyInjection
    name: DependencyInjection
    isExternal: true
- uid: Microsoft.Extensions.Configuration
  commentId: N:Microsoft.Extensions.Configuration
  isExternal: true
  name: Microsoft.Extensions.Configuration
  nameWithType: Microsoft.Extensions.Configuration
  fullName: Microsoft.Extensions.Configuration
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Configuration
    name: Configuration
    isExternal: true
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration
  name: AddCorsConfiguration
  nameWithType: ServiceCollectionExtensions.AddCorsConfiguration
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCorsConfiguration
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning
  name: AddCustomApiVersioning
  nameWithType: ServiceCollectionExtensions.AddCustomApiVersioning
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomApiVersioning
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration
  name: AddSwaggerConfiguration
  nameWithType: ServiceCollectionExtensions.AddSwaggerConfiguration
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddSwaggerConfiguration
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom
  name: AddOpenTelemetryTracingCustom
  nameWithType: ServiceCollectionExtensions.AddOpenTelemetryTracingCustom
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddOpenTelemetryTracingCustom
- uid: Microsoft.Extensions.Hosting.IHostEnvironment
  commentId: T:Microsoft.Extensions.Hosting.IHostEnvironment
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostEnvironment
  nameWithType: IHostEnvironment
  fullName: Microsoft.Extensions.Hosting.IHostEnvironment
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  isExternal: true
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Hosting
    name: Hosting
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions
    name: Extensions
    isExternal: true
  - name: .
  - uid: Microsoft.Extensions.Hosting
    name: Hosting
    isExternal: true
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers
  name: AddCustomControllers
  nameWithType: ServiceCollectionExtensions.AddCustomControllers
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCustomControllers
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom
  name: UseSwaggerCustom
  nameWithType: ServiceCollectionExtensions.UseSwaggerCustom
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.UseSwaggerCustom
- uid: Microsoft.AspNetCore.Builder.IApplicationBuilder
  commentId: T:Microsoft.AspNetCore.Builder.IApplicationBuilder
  parent: Microsoft.AspNetCore.Builder
  isExternal: true
  name: IApplicationBuilder
  nameWithType: IApplicationBuilder
  fullName: Microsoft.AspNetCore.Builder.IApplicationBuilder
- uid: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider
  commentId: T:Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider
  parent: Microsoft.AspNetCore.Mvc.ApiExplorer
  isExternal: true
  name: IApiVersionDescriptionProvider
  nameWithType: IApiVersionDescriptionProvider
  fullName: Microsoft.AspNetCore.Mvc.ApiExplorer.IApiVersionDescriptionProvider
- uid: Microsoft.AspNetCore.Builder
  commentId: N:Microsoft.AspNetCore.Builder
  isExternal: true
  name: Microsoft.AspNetCore.Builder
  nameWithType: Microsoft.AspNetCore.Builder
  fullName: Microsoft.AspNetCore.Builder
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore
    name: AspNetCore
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Builder
    name: Builder
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore
    name: AspNetCore
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Builder
    name: Builder
    isExternal: true
- uid: Microsoft.AspNetCore.Mvc.ApiExplorer
  commentId: N:Microsoft.AspNetCore.Mvc.ApiExplorer
  isExternal: true
  name: Microsoft.AspNetCore.Mvc.ApiExplorer
  nameWithType: Microsoft.AspNetCore.Mvc.ApiExplorer
  fullName: Microsoft.AspNetCore.Mvc.ApiExplorer
  spec.csharp:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore
    name: AspNetCore
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Mvc
    name: Mvc
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Mvc.ApiExplorer
    name: ApiExplorer
    isExternal: true
  spec.vb:
  - uid: Microsoft
    name: Microsoft
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore
    name: AspNetCore
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Mvc
    name: Mvc
    isExternal: true
  - name: .
  - uid: Microsoft.AspNetCore.Mvc.ApiExplorer
    name: ApiExplorer
    isExternal: true
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob*
  commentId: Overload:MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob
  name: AddCronJob
  nameWithType: ServiceCollectionExtensions.AddCronJob
  fullName: MicroService.WebApi.Extensions.ServiceCollectionExtensions.AddCronJob
- uid: System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig}
  commentId: T:System.Action{MicroService.WebApi.Services.Cron.IScheduleConfig}
  parent: System
  definition: System.Action`1
  name: Action<IScheduleConfig>
  nameWithType: Action<IScheduleConfig>
  fullName: System.Action<MicroService.WebApi.Services.Cron.IScheduleConfig>
  nameWithType.vb: Action(Of IScheduleConfig)
  fullName.vb: System.Action(Of MicroService.WebApi.Services.Cron.IScheduleConfig)
  name.vb: Action(Of IScheduleConfig)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - uid: MicroService.WebApi.Services.Cron.IScheduleConfig
    name: IScheduleConfig
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.WebApi.Services.Cron.IScheduleConfig
    name: IScheduleConfig
  - name: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
