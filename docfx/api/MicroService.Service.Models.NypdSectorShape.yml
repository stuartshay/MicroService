### YamlMime:ManagedReference
items:
- uid: MicroService.Service.Models.NypdSectorShape
  commentId: T:MicroService.Service.Models.NypdSectorShape
  id: NypdSectorShape
  parent: MicroService.Service.Models
  children:
  - MicroService.Service.Models.NypdSectorShape.PatrolBoro
  - MicroService.Service.Models.NypdSectorShape.Pct
  - MicroService.Service.Models.NypdSectorShape.Phase
  - MicroService.Service.Models.NypdSectorShape.Sector
  langs:
  - csharp
  - vb
  name: NypdSectorShape
  nameWithType: NypdSectorShape
  fullName: MicroService.Service.Models.NypdSectorShape
  type: Class
  source:
    remote:
      path: src/MicroService.Service/Models/NypdSectorShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: NypdSectorShape
    path: ../src/MicroService.Service/Models/NypdSectorShape.cs
    startLine: 6
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [ShapeProperties(ShapeProperties.NypdPolicePrecincts)]

      public class NypdSectorShape : ShapeBase
    content.vb: >-
      <ShapeProperties(ShapeProperties.NypdPolicePrecincts)>

      Public Class NypdSectorShape Inherits ShapeBase
  inheritance:
  - System.Object
  - MicroService.Service.Models.Base.ShapeBase
  inheritedMembers:
  - MicroService.Service.Models.Base.ShapeBase.ShapeArea
  - MicroService.Service.Models.Base.ShapeBase.ShapeLength
  - MicroService.Service.Models.Base.ShapeBase.BoundingBox
  - MicroService.Service.Models.Base.ShapeBase.Geometry
  - MicroService.Service.Models.Base.ShapeBase.Feature
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - MicroService.Service.Models.NypdSectorShape.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.ShapePropertiesAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.ShapePropertiesAttribute.#ctor(MicroService.Service.Models.Enum.ShapeProperties)
    arguments:
    - type: MicroService.Service.Models.Enum.ShapeProperties
      value: 9
- uid: MicroService.Service.Models.NypdSectorShape.Pct
  commentId: P:MicroService.Service.Models.NypdSectorShape.Pct
  id: Pct
  parent: MicroService.Service.Models.NypdSectorShape
  langs:
  - csharp
  - vb
  name: Pct
  nameWithType: NypdSectorShape.Pct
  fullName: MicroService.Service.Models.NypdSectorShape.Pct
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/NypdSectorShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Pct
    path: ../src/MicroService.Service/Models/NypdSectorShape.cs
    startLine: 9
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("pct")]

      public string Pct { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("pct")>

      Public Property Pct As String
  overload: MicroService.Service.Models.NypdSectorShape.Pct*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: pct
- uid: MicroService.Service.Models.NypdSectorShape.Sector
  commentId: P:MicroService.Service.Models.NypdSectorShape.Sector
  id: Sector
  parent: MicroService.Service.Models.NypdSectorShape
  langs:
  - csharp
  - vb
  name: Sector
  nameWithType: NypdSectorShape.Sector
  fullName: MicroService.Service.Models.NypdSectorShape.Sector
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/NypdSectorShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Sector
    path: ../src/MicroService.Service/Models/NypdSectorShape.cs
    startLine: 12
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("sector")]

      public string Sector { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("sector")>

      Public Property Sector As String
  overload: MicroService.Service.Models.NypdSectorShape.Sector*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: sector
- uid: MicroService.Service.Models.NypdSectorShape.PatrolBoro
  commentId: P:MicroService.Service.Models.NypdSectorShape.PatrolBoro
  id: PatrolBoro
  parent: MicroService.Service.Models.NypdSectorShape
  langs:
  - csharp
  - vb
  name: PatrolBoro
  nameWithType: NypdSectorShape.PatrolBoro
  fullName: MicroService.Service.Models.NypdSectorShape.PatrolBoro
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/NypdSectorShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: PatrolBoro
    path: ../src/MicroService.Service/Models/NypdSectorShape.cs
    startLine: 15
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("patrol_bor")]

      public string PatrolBoro { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("patrol_bor")>

      Public Property PatrolBoro As String
  overload: MicroService.Service.Models.NypdSectorShape.PatrolBoro*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: patrol_bor
- uid: MicroService.Service.Models.NypdSectorShape.Phase
  commentId: P:MicroService.Service.Models.NypdSectorShape.Phase
  id: Phase
  parent: MicroService.Service.Models.NypdSectorShape
  langs:
  - csharp
  - vb
  name: Phase
  nameWithType: NypdSectorShape.Phase
  fullName: MicroService.Service.Models.NypdSectorShape.Phase
  type: Property
  source:
    remote:
      path: src/MicroService.Service/Models/NypdSectorShape.cs
      branch: develop
      repo: https://github.com/stuartshay/MicroService.git
    id: Phase
    path: ../src/MicroService.Service/Models/NypdSectorShape.cs
    startLine: 18
  assemblies:
  - MicroService.Service
  namespace: MicroService.Service.Models
  syntax:
    content: >-
      [FeatureName("phase")]

      public string Phase { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <FeatureName("phase")>

      Public Property Phase As String
  overload: MicroService.Service.Models.NypdSectorShape.Phase*
  attributes:
  - type: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute
    ctor: MicroService.Service.Models.Enum.Attributes.FeatureNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: phase
references:
- uid: MicroService.Service.Models
  commentId: N:MicroService.Service.Models
  name: MicroService.Service.Models
  nameWithType: MicroService.Service.Models
  fullName: MicroService.Service.Models
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: MicroService.Service.Models.Base.ShapeBase
  commentId: T:MicroService.Service.Models.Base.ShapeBase
  parent: MicroService.Service.Models.Base
  name: ShapeBase
  nameWithType: ShapeBase
  fullName: MicroService.Service.Models.Base.ShapeBase
- uid: MicroService.Service.Models.Base.ShapeBase.ShapeArea
  commentId: P:MicroService.Service.Models.Base.ShapeBase.ShapeArea
  parent: MicroService.Service.Models.Base.ShapeBase
  name: ShapeArea
  nameWithType: ShapeBase.ShapeArea
  fullName: MicroService.Service.Models.Base.ShapeBase.ShapeArea
- uid: MicroService.Service.Models.Base.ShapeBase.ShapeLength
  commentId: P:MicroService.Service.Models.Base.ShapeBase.ShapeLength
  parent: MicroService.Service.Models.Base.ShapeBase
  name: ShapeLength
  nameWithType: ShapeBase.ShapeLength
  fullName: MicroService.Service.Models.Base.ShapeBase.ShapeLength
- uid: MicroService.Service.Models.Base.ShapeBase.BoundingBox
  commentId: P:MicroService.Service.Models.Base.ShapeBase.BoundingBox
  parent: MicroService.Service.Models.Base.ShapeBase
  name: BoundingBox
  nameWithType: ShapeBase.BoundingBox
  fullName: MicroService.Service.Models.Base.ShapeBase.BoundingBox
- uid: MicroService.Service.Models.Base.ShapeBase.Geometry
  commentId: P:MicroService.Service.Models.Base.ShapeBase.Geometry
  parent: MicroService.Service.Models.Base.ShapeBase
  name: Geometry
  nameWithType: ShapeBase.Geometry
  fullName: MicroService.Service.Models.Base.ShapeBase.Geometry
- uid: MicroService.Service.Models.Base.ShapeBase.Feature
  commentId: P:MicroService.Service.Models.Base.ShapeBase.Feature
  parent: MicroService.Service.Models.Base.ShapeBase
  name: Feature
  nameWithType: ShapeBase.Feature
  fullName: MicroService.Service.Models.Base.ShapeBase.Feature
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: MicroService.Service.Models.NypdSectorShape.MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  parent: MicroService.Service.Helpers.ReflectionExtensions
  definition: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<NypdSectorShape>(NypdSectorShape)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<NypdSectorShape>(NypdSectorShape)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<MicroService.Service.Models.NypdSectorShape>(MicroService.Service.Models.NypdSectorShape)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of NypdSectorShape)(NypdSectorShape)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of MicroService.Service.Models.NypdSectorShape)(MicroService.Service.Models.NypdSectorShape)
  name.vb: ArePropertiesNotNull(Of NypdSectorShape)(NypdSectorShape)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Service.Models.NypdSectorShape)
    name: ArePropertiesNotNull
  - name: <
  - uid: MicroService.Service.Models.NypdSectorShape
    name: NypdSectorShape
  - name: '>'
  - name: (
  - uid: MicroService.Service.Models.NypdSectorShape
    name: NypdSectorShape
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(MicroService.Service.Models.NypdSectorShape)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - uid: MicroService.Service.Models.NypdSectorShape
    name: NypdSectorShape
  - name: )
  - name: (
  - uid: MicroService.Service.Models.NypdSectorShape
    name: NypdSectorShape
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MicroService.Service.Models.Base
  commentId: N:MicroService.Service.Models.Base
  name: MicroService.Service.Models.Base
  nameWithType: MicroService.Service.Models.Base
  fullName: MicroService.Service.Models.Base
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  - name: .
  - uid: MicroService.Service.Models.Base
    name: Base
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Models
    name: Models
  - name: .
  - uid: MicroService.Service.Models.Base
    name: Base
- uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  commentId: M:MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
  name: ArePropertiesNotNull<T>(T)
  nameWithType: ReflectionExtensions.ArePropertiesNotNull<T>(T)
  fullName: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull<T>(T)
  nameWithType.vb: ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  fullName.vb: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull(Of T)(T)
  name.vb: ArePropertiesNotNull(Of T)(T)
  spec.csharp:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: MicroService.Service.Helpers.ReflectionExtensions.ArePropertiesNotNull``1(``0)
    name: ArePropertiesNotNull
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: MicroService.Service.Helpers.ReflectionExtensions
  commentId: T:MicroService.Service.Helpers.ReflectionExtensions
  parent: MicroService.Service.Helpers
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: MicroService.Service.Helpers.ReflectionExtensions
- uid: MicroService.Service.Helpers
  commentId: N:MicroService.Service.Helpers
  name: MicroService.Service.Helpers
  nameWithType: MicroService.Service.Helpers
  fullName: MicroService.Service.Helpers
  spec.csharp:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
  spec.vb:
  - uid: MicroService
    name: MicroService
  - name: .
  - uid: MicroService.Service
    name: Service
  - name: .
  - uid: MicroService.Service.Helpers
    name: Helpers
- uid: MicroService.Service.Models.NypdSectorShape.Pct*
  commentId: Overload:MicroService.Service.Models.NypdSectorShape.Pct
  name: Pct
  nameWithType: NypdSectorShape.Pct
  fullName: MicroService.Service.Models.NypdSectorShape.Pct
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: MicroService.Service.Models.NypdSectorShape.Sector*
  commentId: Overload:MicroService.Service.Models.NypdSectorShape.Sector
  name: Sector
  nameWithType: NypdSectorShape.Sector
  fullName: MicroService.Service.Models.NypdSectorShape.Sector
- uid: MicroService.Service.Models.NypdSectorShape.PatrolBoro*
  commentId: Overload:MicroService.Service.Models.NypdSectorShape.PatrolBoro
  name: PatrolBoro
  nameWithType: NypdSectorShape.PatrolBoro
  fullName: MicroService.Service.Models.NypdSectorShape.PatrolBoro
- uid: MicroService.Service.Models.NypdSectorShape.Phase*
  commentId: Overload:MicroService.Service.Models.NypdSectorShape.Phase
  name: Phase
  nameWithType: NypdSectorShape.Phase
  fullName: MicroService.Service.Models.NypdSectorShape.Phase
