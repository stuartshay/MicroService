name: Build/Test/Deploy
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: microservice-api
  REGION: us-east4
  ARTIFACT_REGISTRY_HOST: us-east4-docker.pkg.dev
  GCP_DOCKER_IMAGE: us-east4-docker.pkg.dev/velvety-byway-327718/microservice-api/microservice-api
  DH_DOCKER_IMAGE: stuartshay/microservice-api
  DOCKER_FILE: docker/microservice-api-multi.dockerfile/Dockerfile
  DOCKER_IMAGE_TAG: 5.1-buildx-${{ github.sha }}
  DOCKER_IMAGE_PLATFORM: linux/amd64,linux/arm/v7
  BUILD_NUMBER: ${{ github.sha }}
  ASPNETCORE_ENVIRONMENT: CloudRun

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'test/**'
      - '.github/workflows/actions.yml'
    branches:
      - master
      - develop
      - 'feature/**'
      - 'fix/**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      dotnet: ${{ steps.dotnet-version.outputs.dotnet }}
    strategy:
      matrix:
        dotnet: ['5.0.x']

    steps:
      - id: dotnet-version
        run: echo "::set-output name=dotnet::${{ matrix.dotnet }}"

      - uses: actions/checkout@v2

      - name: Setup dotnet ${{ matrix.dotnet }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Install dependencies
        run: dotnet restore

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.gcp_project }}
          service_account_key: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT }}
          export_default_credentials: true

      - name: Google Cloud Artifacts/Authorize Docker push
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_HOST }}

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
          file: ${{ env.DOCKER_FILE }}
          tags: ${{ env.DH_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG}}, ${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          outputs: type=docker,dest=image.tar
          cache-from: type=registry,ref=${{ env.GCP_DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.GCP_DOCKER_IMAGE }}:buildcache,mode=max

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.dotnet }}
          path: image.tar

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet ${{ needs.build.outputs.dotnet }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ needs.build.outputs.dotnet }}

      - name: Install dependencies
        run: dotnet restore

      - name: Test with dotnet
        uses: zyborg/dotnet-tests-report@v1
        with:
          project_path: test/MicroService.Test
          report_name: MicroService.Test
          report_title: MicroService.Test
          fail_build_on_failed_tests: true
          github_token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Load images
        run: |
          docker load --input ${{ needs.build.outputs.dotnet }}/image.tar

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.gcp_project }}
          service_account_key: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT }}
          export_default_credentials: true

      - name: Google Cloud Artifacts/Authorize Docker push
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_HOST }}

      - name: GCP Artifact Registry
        run: docker push ${{ env.GCP_DOCKER_IMAGE }} --all-tags

  deploy:
    runs-on: ubuntu-latest
    needs: publish
    environment:
      name: prod
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: rlespinasse/github-slug-action@v3.x

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ secrets.gcp_project }}
          service_account_key: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT }}
          export_default_credentials: true

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@main
        with:
          service: ${{ env.SERVICE }}-${{ env.GITHUB_REF_SLUG }}
          image: ${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG}}
          region: ${{ env.REGION }}
          env_vars: 'ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }}'
          flags: '--memory 1Gi --port 5000 --allow-unauthenticated'

  health-check:
    name: health check
    runs-on: ubuntu-latest
    needs: deploy
    env:
      url: ${{ needs.deploy.outputs.url }}/health
      max-attempts: 15
      retry-delay-sec: 5
    steps:
      - run: |
          curl --fail -s --retry ${{ env.max-attempts }} --retry-delay ${{ env.retry-delay-sec }} --retry-connrefused ${{ env.url }} -L  | jq
