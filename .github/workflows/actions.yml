name: Build/Test/Deploy
env:
  DOCKER_REPOSITORY: stuartshay/microservice-api
  DOCKER_REPOSITORY_IMAGE: stuartshay/microservice-api
  DOCKER_IMAGE_TAG: 8.0.${{ github.run_number }}
  BUILD_NUMBER: ${{ github.run_number }}
  DOCKER_FILE: docker/microservice-api-multi.dockerfile/Dockerfile
  BRANCH_NAME: '${{ github.ref_name }}'
  GCP_DOCKER_IMAGE: us-east4-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/microservice-api/microservice-api
  ARTIFACT_REGISTRY_HOST: us-east4-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  SERVICE: microservice-api
  REGION: us-east4
  DOCKER_IMAGE_PLATFORM: linux/amd64,linux/arm/v7
  ASPNETCORE_ENVIRONMENT: CloudRun
  ASPNETCORE_URLS: 'http://*:5000'

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'test/**'
    branches:
      - master

jobs:
  test-netcore:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup dotnet 8.0.x
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Install dotnet-coverage tool
        run: dotnet tool install --global dotnet-coverage

      - name: Test
        run: dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Convert coverage report to Cobertura format
        run: reportgenerator -reports:./coverage.xml -targetdir:coverage -reporttypes:Cobertura

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/Cobertura.xml
          fail_ci_if_error: true # Set to 'false' if you want to allow CI to pass even if Codecov upload fails

  build:
    runs-on: ubuntu-latest
    #needs: test-netcore

    steps:
      - uses: actions/checkout@v3

      - name: Set current_datetime
        id: set_datetime
        run: echo "::set-output name=current_datetime::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - name: Google Cloud Artifacts/Authorize Docker push
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_HOST }}

      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
          file: ${{ env.DOCKER_FILE }}
          tags: |
            ${{ env.DOCKER_REPOSITORY_IMAGE}}:latest
            ${{ env.DOCKER_REPOSITORY_IMAGE }}:${{ env.DOCKER_IMAGE_TAG}}
            ${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          labels: |
            org.label-schema.version=8.0.1.${{ env.BUILD_NUMBER }}
            org.label-schema.build-date=${{ steps.set_datetime.outputs.current_datetime }}
          outputs: type=docker,dest=image.tar
          cache-from: type=registry,ref=${{ env.GCP_DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.GCP_DOCKER_IMAGE }}:buildcache,mode=max

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-artifact
          path: image.tar

  publish-dockerhub:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Load images
        run: |
          docker load --input docker-artifact/image.tar

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker Hub
        run: |
          docker push ${{ env.DOCKER_REPOSITORY_IMAGE}} --all-tags

  publish-googlecloud:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Load images
        run: |
          docker load --input docker-artifact/image.tar

      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT  }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.gcp_project }}

      - name: Google Cloud Artifacts/Authorize Docker push
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_HOST }}

      - name: GCP Artifact Registry
        run: docker push ${{ env.GCP_DOCKER_IMAGE }} --all-tags

  deploy-googlecloud:
    runs-on: ubuntu-latest
    needs: publish-googlecloud
    environment:
      name: prod
      url: ${{ steps.deploy.outputs.url }}
    outputs:
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Google Auth
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      #- name: Deploy to Cloud Run
      #  id: deploy
      #  uses: 'google-github-actions/deploy-cloudrun@v1'
      #  with:
      #    service: ${{ env.SERVICE }}
      #    image: ${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG}}
      #    region: ${{ env.REGION }}
      #    env_vars: |
      #      ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }}
      #      ASPNETCORE_URLS=${{ env.ASPNETCORE_URLS }}
      #    flags: '--memory 1Gi --port 5000 --allow-unauthenticated'

    - name: Deploy to Cloud Run with GCS Bucket Mount
      run: |
        gcloud run deploy ${{ env.SERVICE }} \
          --image=${{ env.GCP_DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG}} \
          --region=${{ env.REGION }} \
          --set-env-vars=ASPNETCORE_ENVIRONMENT=${{ env.ASPNETCORE_ENVIRONMENT }},ASPNETCORE_URLS=${{ env.ASPNETCORE_URLS }} \
          --memory=1Gi --port=5000 --allow-unauthenticated \
          --update-volumes=my-volume=projects/${{ env.GCP_PROJECT_ID }}/locations/${{ env.REGION }}/buckets/${{ env.GCS_BUCKET_NAME }},mountPath=/mnt/gcs,mode=ro
      env:
        GCP_PROJECT_ID: ${{ secrets.PROJECT_ID}}
        GCS_BUCKET_NAME: ${{ secrets.GCS_BUCKET_NAME }}



  health-googlecloud:
    name: health check
    runs-on: ubuntu-latest
    needs: deploy-googlecloud
    env:
      url: ${{ needs.deploy.outputs.url }}/health
      max-attempts: 15
      retry-delay-sec: 5
    steps:
      - run: |
          curl --fail -s --retry ${{ env.max-attempts }} --retry-delay ${{ env.retry-delay-sec }} --retry-connrefused ${{ env.url }} -L  | jq

  cleanup:
    runs-on: ubuntu-latest
    needs: [health-googlecloud]
    steps:
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: docker-artifact
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}